#cloud-config
#
# Copyright 2017 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

write_files:
  - path: /tmp/nvidia/setup-env.sh
    permissions: 0755
    owner: root
    content: |
      ENV_FILE="/etc/nvidia-installer-env"
      NVIDIA_ENV_METADATA_KEY="nvidia-installer-env"

      main() {
        cat > "${ENV_FILE}" << 'EOF'
      COS_NVIDIA_INSTALLER_CONTAINER=gcr.io/cos-cloud/cos-gpu-installer:latest
      NVIDIA_INSTALL_DIR_HOST=/var/lib/nvidia
      NVIDIA_INSTALL_DIR_CONTAINER=/usr/local/nvidia
      ROOT_MOUNT_DIR=/root
      RUN_CUDA_TEST=true
      EOF
        local -r env_from_metadata=`/usr/share/google/get_metadata_value "attributes/${NVIDIA_ENV_METADATA_KEY}"`
        # Append environment variables from metadata to the end of the file so
        # that they (if any) will overwrite the default values.
        echo "${env_from_metadata}" >> "${ENV_FILE}"

        chmod 755 "${ENV_FILE}"
      }

      main

  - path: /etc/systemd/system/setup-nvidia-installer-env.service
    permissions: 0755
    owner: root
    content: |
      [Unit]
      Description=Setup environment variables for GPU driver installer
      Requires=network-online.target
      After=network-online.target

      [Service]
      User=root
      Type=oneshot
      RemainAfterExit=true
      ExecStart=/bin/bash /tmp/nvidia/setup-env.sh
      StandardOutput=journal+console
      StandardError=journal+console

  - path: /etc/systemd/system/cos-gpu-installer.service
    permissions: 0755
    owner: root
    content: |
      [Unit]
      Description=Run the GPU driver installer container
      Requires=network-online.target gcr-online.target setup-nvidia-installer-env.service
      After=network-online.target gcr-online.target setup-nvidia-installer-env.service

      [Service]
      User=root
      Type=oneshot
      RemainAfterExit=true
      EnvironmentFile=/etc/nvidia-installer-env
      ExecStartPre=/bin/bash -c 'mkdir -p "${NVIDIA_INSTALL_DIR_HOST}" && mount --bind "${NVIDIA_INSTALL_DIR_HOST}" "${NVIDIA_INSTALL_DIR_HOST}" && mount -o remount,exec "${NVIDIA_INSTALL_DIR_HOST}"'
      ExecStart=/usr/bin/docker run --privileged --net=host --pid=host --volume "${NVIDIA_INSTALL_DIR_HOST}":"${NVIDIA_INSTALL_DIR_CONTAINER}" --volume /dev:/dev --volume "/":"${ROOT_MOUNT_DIR}" --env-file /etc/nvidia-installer-env "${COS_NVIDIA_INSTALLER_CONTAINER}"
      ExecStartPost=/bin/bash -c "${NVIDIA_INSTALL_DIR_HOST}/bin/nvidia-smi"
      StandardOutput=journal+console
      StandardError=journal+console

  - path: /etc/systemd/system/cuda-vector-add.service
    permissions: 0755
    owner: root
    content: |
      [Unit]
      Description=Run a CUDA Vector Addition Workload
      Requires=cos-gpu-installer.service
      After=cos-gpu-installer.service

      [Service]
      User=root
      Type=oneshot
      RemainAfterExit=true
      EnvironmentFile=/etc/nvidia-installer-env
      ExecStart=/bin/bash -c 'if [ ! -z "${RUN_CUDA_TEST}" ] && [ "${RUN_CUDA_TEST}" = "true" ]; then docker run --volume "${NVIDIA_INSTALL_DIR_HOST}"/lib64:"${NVIDIA_INSTALL_DIR_CONTAINER}"/lib64 --device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidia-uvm:/dev/nvidia-uvm --device /dev/nvidiactl:/dev/nvidiactl gcr.io/google_containers/cuda-vector-add:v0.1; fi'
      StandardOutput=journal+console
      StandardError=journal+console

runcmd:
  - systemctl daemon-reload
  - systemctl enable setup-nvidia-installer-env.service
  - systemctl enable cos-gpu-installer.service
  - systemctl enable cuda-vector-add.service
  - systemctl start setup-nvidia-installer-env.service
  - systemctl start cos-gpu-installer.service
  - systemctl start cuda-vector-add.service
